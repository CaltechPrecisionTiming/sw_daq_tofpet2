#!/usr/bin/env python
# -*- coding: utf-8 -*-

from petsys import daqd, config
from copy import deepcopy
import argparse

parser = argparse.ArgumentParser(description='Acquire data for TDC calibration')
parser.add_argument("--config", type=str, required=True, help="Configuration file")
parser.add_argument("-o", type=str, dest="fileNamePrefix", required=True, help="Data filename (prefix)")
parser.add_argument("--time", type=float, required=True, help="Acquisition time (in seconds)")
parser.add_argument("--mode", type=str, required=True, choices=["tot", "qdc"], help="Acquisition mode (ToT or QDC)")
args = parser.parse_args()

systemConfig = config.ConfigFromFile(args.config)

daqd = daqd.Connection()
daqd.initializeSystem()
systemConfig.loadToHardware(daqd, config.APPLY_BIAS_ON)

qdcMode = args.mode == "qdc"

asicsConfig = daqd.getAsicsConfig()
for ac in asicsConfig.values():
	gc = ac.globalConfig
	for cc in ac.channelConfig:
		cc.setValue("trigger_mode_1", 0b00)

		if not qdcMode:
			cc.setValue("qdc_mode", 0)
			cc.setValue("intg_en", 0)
			cc.setValue("intg_signal_en", 0)
		else:
			cc.setValue("qdc_mode", 1)
			cc.setValue("intg_en", 1)
			cc.setValue("intg_signal_en", 1)
			

daqd.setAsicsConfig(asicsConfig)

daqd.openRawAcquisition(args.fileNamePrefix, qdcMode=qdcMode)
daqd.acquire(args.time, 0, 0);

systemConfig.loadToHardware(daqd, config.APPLY_BIAS_OFF)
