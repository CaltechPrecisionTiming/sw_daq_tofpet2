#!/usr/bin/env python
# -*- coding: utf-8 -*-

from petsys import daqd, config
from copy import deepcopy
import argparse
from time import sleep
import ROOT
from sys import stdout, stderr
import subprocess

parser = argparse.ArgumentParser(description='Acquire data ASIC test')
parser.add_argument("-o", type=str, dest="outFilePrefix", required=True, help="Data file prefix")
parser.add_argument("-n", type=int, dest="expected", required=False, default=-1, help="Data file prefix")

args = parser.parse_args()

print "****"
v135_a = float(input("1V35 current (mA)? "))
v270_a = float(input("2V7  current (mA)? "))

daqd = daqd.Connection()
daqd.initializeSystem()

for portID, slaveID, chipID in daqd.getActiveAsics():
	asicType = daqd.getAsicSubtype(portID, slaveID, chipID)
	if asicType != "2C":
		stderr.write("ERROR: Found unsuported ASIC type: %s\n" % asicType)
		exit(1)

activeAsicsIDs = [ 32*64* portID + 64* slaveID + chipID for portID, slaveID, chipID in daqd.getActiveAsics() ]
if len(activeAsicsIDs) == 0:
	print "FAIL: No active ASICs found"
	exit(1)


if args.expected != -1:
	if args.expected not in activeAsicsIDs:
		print "ASIC %d not active" % args.expected
		exit(1)
		
	expectedAsicList = [args.expected ]
else:
	expectedAsicList = activeAsicsIDs

f = open(args.outFilePrefix + "_expected.txt", "w")
for asicID in expectedAsicList:
	f.write("%d\n" % asicID)
f.close()

v135_b = float(input("1V35 current (mA)? "))
v270_b = float(input("2V7  current (mA)? "))
current_file = open(args.outFilePrefix + "_current.txt", "w")
current_file.write("%5.1f\t%5.1f\t%5.1f\t%5.1f\n" % (v135_a, v270_a, v135_b, v270_b))
current_file.close()



asicsConfig0 = daqd.getAsicsConfig()




##
## Perform TDCA test
## 3 phase
##
qdcMode = False
daqd.openRawAcquisition(args.outFilePrefix + "_tdca", qdcMode=qdcMode, calMode = True)
K = 8
phases = [ n / 4.0 for n in range(4) ]
for firstChannel in range(0, K):
	asicsConfig = deepcopy(asicsConfig0)
	for ac in asicsConfig.values():
		gc = ac.globalConfig
		for cc in ac.channelConfig:
			cc.setValue("trigger_mode_1", 0b11)	# Disable channel from triggering

			if not qdcMode:
				cc.setValue("qdc_mode", 0)
				cc.setValue("intg_en", 0)
				cc.setValue("intg_signal_en", 0)
			else:
				cc.setValue("qdc_mode", 1)
				cc.setValue("intg_en", 1)
				cc.setValue("intg_signal_en", 1)
				
		# Activate target channel
		for channelID in range(firstChannel, 64, K):
			cc = ac.channelConfig[channelID]
			cc.setValue("trigger_mode_1", 0b01)	# Set channel to TP trigger mode
		
		
		
	daqd.setAsicsConfig(asicsConfig)

	for phase in phases:
		daqd.setTestPulsePLL(200, 1024, phase, False)
		daqd.acquire(0.02, phase, 0)
		
daqd.closeAcquisition()

##
## Perform QDCA test
## 3 phase
##
qdcMode = True
daqd.openRawAcquisition(args.outFilePrefix + "_qdca", qdcMode=qdcMode, calMode = True)
K = 8
phases = [ n / 4.0 for n in range(4) ]
lengths = [ 60, 80, 100 ]
for firstChannel in range(0, K):
	asicsConfig = deepcopy(asicsConfig0)
	for ac in asicsConfig.values():
		gc = ac.globalConfig
		for cc in ac.channelConfig:
			cc.setValue("trigger_mode_1", 0b11)	# Disable channel from triggering

			if not qdcMode:
				cc.setValue("qdc_mode", 0)
				cc.setValue("intg_en", 0)
				cc.setValue("intg_signal_en", 0)
			else:
				cc.setValue("qdc_mode", 1)
				cc.setValue("intg_en", 1)
				cc.setValue("intg_signal_en", 1)
				cc.setValue("min_intg_time", 0)
				cc.setValue("max_intg_time", 127)
				
		# Activate target channel
		for channelID in range(firstChannel, 64, K):
			cc = ac.channelConfig[channelID]
			cc.setValue("trigger_mode_1", 0b01)	# Set channel to TP trigger mode
		
		
		
	daqd.setAsicsConfig(asicsConfig)

	for phase in phases:
		for length in lengths:
			daqd.setTestPulsePLL(length, 1024, phase, False)
			daqd.acquire(0.02, phase, length)
		
daqd.closeAcquisition()
		

##
## Perform FETP test with
## 1 amplitude (max)
## 3 phase
##
qdcMode = True
daqd.openRawAcquisition(args.outFilePrefix + "_fetp", qdcMode=qdcMode, calMode = True)
phases = [ n / 3.0 for n in range(3) ]
for channelID in range(64):
	asicsConfig = deepcopy(asicsConfig0)
	for ac in asicsConfig.values():
		gc = ac.globalConfig
		gc.setValue("disc_lsb_t1", 61)
		gc.setValue("fetp_enable", 0b1)			# Enable FETP for ASIC
		gc.setValue("v_cal_ref_ig", 31)			# Set FETP amplitude
		for cc in ac.channelConfig:
			cc.setValue("trigger_mode_1", 0b11)	# Disable channel from triggering
			cc.setValue("fe_tp_en", 0b01)		# Disable FETP for channel but enable channel's capacitance


			if not qdcMode:
				cc.setValue("qdc_mode", 0)
				cc.setValue("intg_en", 0)
				cc.setValue("intg_signal_en", 0)
			else:
				cc.setValue("qdc_mode", 1)
				cc.setValue("intg_en", 1)
				cc.setValue("intg_signal_en", 1)
				
			cc.setValue("trigger_mode_2_t", 0)	# 
			cc.setValue("trigger_mode_2_e", 0)	# 
			cc.setValue("trigger_mode_2_q", 0)	# 
			cc.setValue("trigger_mode_2_b", 0)	# 
			cc.setValue("baseline_e", 5)
			cc.setValue("baseline_t", 50)
			cc.setValue("vth_t1", 0)
			cc.setValue("vth_t2", 0)
			cc.setValue("vth_e", 0)

				
		# Activate target channel
		cc = ac.channelConfig[channelID]
		cc.setValue("fe_tp_en", 0b11)		# Enable FETP for channel
		cc.setValue("trigger_mode_1", 0b00)	# Set channel to normal trigger mode
		
		
		
	daqd.setAsicsConfig(asicsConfig)

	print "FETP channel %2d" % channelID
	for phase in phases:
		daqd.setTestPulsePLL(200, 400*1024, phase, False)
		daqd.acquire(0.2, phase, 0)
		
daqd.closeAcquisition()

print "Analyzing..."
result = subprocess.call(["./analyze_asic_quick_scan", "-i", args.outFilePrefix, "-o", args.outFilePrefix + "_log.txt"])
if result == 0:
	print "TEST PASS"
else:
	print "TEST FAIL"
